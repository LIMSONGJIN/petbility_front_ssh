generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String             @id @default(uuid()) @db.Uuid
  email               String?            @unique
  emailVerified       DateTime?
  name                String?
  phone               String?
  image               String?
  address             String?
  password            String?
  role                String             @default("USER")
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  deletedAt           DateTime?
  latitude            Float?
  longitude           Float?
  pets                Pet[]
  businessSchedules   BusinessSchedule[] @relation("BusinessSchedules")
  businessServices    BusinessService[]  @relation("BusinessToServices")
  notifications       Notification[]     @relation("UserNotifications")
  businessReservations Reservation[]     @relation("BusinessReservations")
  reservations        Reservation[]      @relation("UserReservations")
  services            Service[]          @relation("UserServices")
  accounts            Account[]
  sessions            Session[]
  payments            Payment[]
  businessPayments    Payment[]          @relation("BusinessPayments")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
   userId       String   @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}


model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
   userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Pet {
  pet_id       String        @id @default(uuid()) @db.Uuid
  user_id      String        @db.Uuid
  name         String
  species      String
  breed        String?
  age          Int?
  weight       Float?
  photo        String?
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  user         User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  reservations Reservation[]
}

model Service {
  service_id       String            @id @default(uuid()) @db.Uuid
  name             String
  description      String
  price            Decimal
  category         ServiceCategory
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  admin_id         String            @db.Uuid
  businessServices BusinessService[] @relation("ServiceToBusinesses")
  reservations     Reservation[]
  payments         Payment[]
  admin            User              @relation("UserServices", fields: [admin_id], references: [id])

  @@map("services")
}

model Reservation {
  reservation_id String            @id @default(uuid()) @db.Uuid
  user_id        String            @db.Uuid
  service_id     String?           @db.Uuid
  business_id    String            @db.Uuid
  pet_id         String?           @db.Uuid
  payment_id     String?           @db.Uuid
  status         ReservationStatus
  notes          String?
  created_at     DateTime          @default(now())
  updated_at     DateTime          @updatedAt
  price          Decimal           @default(0)
  start_time     DateTime
  end_time       DateTime?
  is_available   Boolean           @default(true)
  business       User              @relation("BusinessReservations", fields: [business_id], references: [id], onDelete: Cascade)
  pet            Pet?              @relation(fields: [pet_id], references: [pet_id], onDelete: Cascade)
  service        Service?          @relation(fields: [service_id], references: [service_id], onDelete: Cascade)
  user           User              @relation("UserReservations", fields: [user_id], references: [id], onDelete: Cascade)
  payment        Payment?          @relation(fields: [payment_id], references: [payment_id], onDelete: SetNull)

  @@index([business_id, start_time, end_time, is_available])
  @@index([user_id, start_time])
  @@map("reservations")
}

model Notification {
  notification_id String           @id @default(uuid()) @db.Uuid
  user_id         String           @db.Uuid
  message         String
  is_read         Boolean          @default(false)
  created_at      DateTime         @default(now())
  metadata        Json?
  title           String
  updated_at      DateTime         @updatedAt
  type            NotificationType
  user            User             @relation("UserNotifications", fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id, is_read])
  @@index([created_at])
  @@map("notifications")
}

model BusinessSchedule {
  id            String        @id @default(uuid()) @db.Uuid
  business_id   String        @db.Uuid
  schedule_data Json?
  day_of_week   String?
  type          ScheduleType?
  start_time    String?
  end_time      String?
  reason        String?
  is_day_off    Boolean?      @default(false)
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  business      User          @relation("BusinessSchedules", fields: [business_id], references: [id], onDelete: Cascade)

  @@index([business_id])
  @@map("business_schedules")
}

model BusinessService {
  id          String   @id @default(uuid()) @db.Uuid
  business_id String   @db.Uuid
  service_id  String   @db.Uuid
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  business    User     @relation("BusinessToServices", fields: [business_id], references: [id], onDelete: Cascade)
  service     Service  @relation("ServiceToBusinesses", fields: [service_id], references: [service_id], onDelete: Cascade)

  @@unique([business_id, service_id])
  @@index([business_id])
  @@index([service_id])
  @@map("business_services")
}

enum ServiceCategory {
  cremation
  bathing
  funeral
  grooming
  custom_vehicles
  other_care
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
  IN_PROGRESS
  REJECTED
  NO_SHOW
  BLOCKED
}

enum NotificationType {
  RESERVATION_CREATED
  RESERVATION_UPDATED
  RESERVATION_CANCELED
  RESERVATION_ACCEPTED
  RESERVATION_REJECTED
  RESERVATION_COMPLETED
  RESERVATION_REMINDER
  REVIEW_REQUESTED
  REVIEW_RECEIVED
  PAYMENT_COMPLETED
  PAYMENT_FAILED
  SYSTEM
}

enum PaymentStatus {
  READY
  IN_PROGRESS
  WAITING_FOR_DEPOSIT
  DONE
  CANCELED
  ABORTED
  FAILED
  PENDING
}

enum PaymentMethod {
  CARD
  VIRTUAL_ACCOUNT
  ACCOUNT_TRANSFER
  MOBILE_PAYMENT
  GIFT_CARD
  EASY_PAY
}

enum ScheduleType {
  WEEKLY
  BREAK
}

model Payment {
  payment_id    String         @id @default(uuid()) @db.Uuid
  user_id       String         @db.Uuid
  service_id    String?        @db.Uuid
  business_id   String?        @db.Uuid
  amount        Decimal
  status        PaymentStatus
  method        PaymentMethod
  orderId       String         @unique
  paymentKey    String?
  requested_at  DateTime       @default(now())
  approved_at   DateTime?
  canceled_at   DateTime?
  cancel_reason String?
  metadata      Json?
  user          User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  service       Service?       @relation(fields: [service_id], references: [service_id], onDelete: SetNull)
  business      User?          @relation("BusinessPayments", fields: [business_id], references: [id], onDelete: SetNull)
  reservations  Reservation[]

  @@map("payments")
}
